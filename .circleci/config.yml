version: 2

test_steps: &test_steps
  docker:
    - image: mcr.microsoft.com/dotnet/core/sdk:2.1
  steps:
    - checkout
    - run: find .
    - run: dotnet restore
    - run: dotnet test --filter TestCategory!=DynamoTests

deploy_steps: &deploy_steps
  docker:
    - image: mcr.microsoft.com/dotnet/core/sdk:2.1
  steps:
    - checkout
    - run: find .
    - run: apt update && apt -y install zip
    - run: dotnet tool install --global Amazon.Lambda.Tools
    - run: mkdir ~/.aws && echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials
    - run: cd ./src/ChameleonFunction/ && /root/.dotnet/tools/dotnet-lambda deploy-function ChameleonFunction --region "eu-west-1"

sam_deploy_steps: &sam_deploy_steps
  docker:
    - image: mcr.microsoft.com/dotnet/core/sdk:2.1
  steps:
    - checkout
    - run: find .
    - run: apt update && apt -y install zip
    - run: apt -y install python-pip
    - run: pip install awscli
    - run: pip install aws-sam-cli
    - run: mkdir ~/.aws && echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials
    - run: sam build
    - run: sam deploy

webapp_test_steps: &webapp_test_steps
  docker:
    - image: docker:stable-git
  steps:
    - checkout
    - setup_remote_docker:
        reusable: true
        version: 17.11.0-ce
    - run:
        name: Build application Docker image
        command: |
          cd ./chameleon-webapp && docker build -t chameleon-webapp .
    - run:
        name: Run tests
        command: |
          cd ./chameleon-webapp && docker run --env CI=true chameleon-webapp npm test

webapp_push_to_s3_steps: &webapp_push_to_s3_steps
  docker:
    - image: circleci/python:3.7-stretch
  working_directory: ~/circleci-docs
  steps:
    - checkout
    - setup_remote_docker:
        reusable: true
        version: 17.11.0-ce
    - run:
        name: Build assets and copy out to host
        command: |
          cd ./chameleon-webapp
          docker build \
            --tag chameleon-webapp .
          docker run --name chameleon-webapp-container chameleon-webapp true
          docker cp chameleon-webapp-container:/home/chameleon/chameleon-webapp/build ./build
    - run:
        name: Install awscli
        command: sudo pip install awscli
    - run:
        name: Push assets to S3
        command: |
          cd ./chameleon-webapp
          aws s3 sync \
            ./build s3://${S3_BUCKET_NAME} \
            --exclude "index.html" \
            --acl=public-read \
            --cache-control=public,max-age=31557600
          aws s3 cp \
            ./build/index.html s3://${S3_BUCKET_NAME} \
            --acl=public-read \
            --cache-control=no-cache
jobs:
  run_tests:
    <<: *test_steps
  deploy_backend_production:
    <<: *deploy_steps
  deploy_backend_staging:
    <<: *sam_deploy_steps
  run_webapp_test:
    <<: *webapp_test_steps
  webapp_push_to_s3_production:
    <<: *webapp_push_to_s3_steps
    environment:
      - S3_BUCKET_NAME: chameleon-game-webapp
  webapp_push_to_s3_staging:
    <<: *webapp_push_to_s3_steps
    environment:
      - S3_BUCKET_NAME: chameleon-game-webapp-test

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - run_tests
      - run_webapp_test
      - webapp_push_to_s3_production:
          requires:
            - run_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - master
      - webapp_push_to_s3_staging:
          requires:
            - run_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - staging
      - deploy_backend_production:
          requires:
            - run_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - master
      - deploy_backend_staging:
          requires:
            - run_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - staging-2
