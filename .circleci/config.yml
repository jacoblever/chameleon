deploy_backend_production_steps: &deploy_backend_production_steps
  docker:
    - image: mcr.microsoft.com/dotnet/core/sdk:2.1
  steps:
    - checkout
    - run: find .
    - run: apt update && apt -y install zip
    - run: dotnet tool install --global Amazon.Lambda.Tools
    - run: mkdir ~/.aws && echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\n" > ~/.aws/credentials
    - run: cd ./src/ChameleonFunction/ && /root/.dotnet/tools/dotnet-lambda deploy-function ChameleonFunction --region $AWS_DEFAULT_REGION

deploy_backend_steps: &deploy_backend_steps
  executor: aws-serverless/default
  steps:
    - checkout
    - aws-serverless/install
    - run:
        name:  Install .NET Core cli
        command: |
          wget -q https://packages.microsoft.com/config/ubuntu/19.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install apt-transport-https
          sudo apt-get update
          sudo apt-get install dotnet-sdk-2.1
          dotnet tool install -g Amazon.Lambda.Tools
    - run:
        name: SAM Build 
        command: |
          PATH=$PATH:~/.dotnet/tools sam build \
            -t ./template.yaml \
            --profile default \
            --region $AWS_DEFAULT_REGION
    - run:
        name: Create SAM Config
        command: |
          echo "version = 0.1" >> samconfig.toml
          echo "[default]" >> samconfig.toml
          echo "[default.deploy]" >> samconfig.toml
          echo "[default.deploy.parameters]" >> samconfig.toml
          echo "stack_name = \"$STACK_NAME\"" >> samconfig.toml
          echo "s3_bucket = \"$S3_BUCKET\"" >> samconfig.toml
          echo "s3_prefix = \"$STACK_NAME\"" >> samconfig.toml
          echo "region = \"$AWS_DEFAULT_REGION\"" >> samconfig.toml
          echo "capabilities = \"CAPABILITY_IAM\"" >> samconfig.toml
    - run:
        name: SAM Deploy 
        command: |
          sam deploy \
            --parameter-overrides ApiDomain=$BACKEND_DOMAIN

webapp_test_steps: &webapp_test_steps
  docker:
    - image: docker:stable-git
  steps:
    - checkout
    - setup_remote_docker:
        reusable: true
        version: 17.11.0-ce
    - run:
        name: Build application Docker image
        command: |
          cd ./chameleon-webapp && docker build -t chameleon-webapp .
    - run:
        name: Run tests
        command: |
          cd ./chameleon-webapp && docker run --env CI=true chameleon-webapp npm test

webapp_push_to_s3_steps: &webapp_push_to_s3_steps
  docker:
    - image: circleci/python:3.7-stretch
  working_directory: ~/circleci-docs
  steps:
    - checkout
    - setup_remote_docker:
        reusable: true
        version: 17.11.0-ce
    - run:
        name: Build assets and copy out to host
        command: |
          cd ./chameleon-webapp
          docker build \
            --build-arg ENV_FILE_POSTFIX \
            --tag chameleon-webapp .
          docker run --name chameleon-webapp-container chameleon-webapp true
          docker cp chameleon-webapp-container:/home/chameleon/chameleon-webapp/build ./build
    - run:
        name: Install awscli
        command: sudo pip install awscli
    - run:
        name: Push assets to S3
        command: |
          cd ./chameleon-webapp
          aws s3 sync \
            ./build s3://${S3_BUCKET_NAME} \
            --exclude "index.html" \
            --acl=public-read \
            --cache-control=public,max-age=31557600
          aws s3 cp \
            ./build/index.html s3://${S3_BUCKET_NAME} \
            --acl=public-read \
            --cache-control=no-cache
  
jobs:
  run_backend_tests:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1
    steps:
      - checkout
      - run: find .
      - run: dotnet restore
      - run: dotnet test --filter TestCategory!=DynamoTests

  deploy_backend_staging:
    <<: *deploy_backend_steps
    environment:
      - STACK_NAME: chameleon-game-backend-staging
      - BACKEND_DOMAIN: chameleon-api-staging.jacoblever.dev
      - S3_BUCKET: aws-sam-cli-managed-default-samclisourcebucket-1hoa4cv2sc075
  
  deploy_backend_production:
    <<: *deploy_backend_steps
    environment:
      - STACK_NAME: chameleon-game-backend-production
      - BACKEND_DOMAIN: chameleon-api.jacoblever.dev
      - S3_BUCKET: aws-sam-cli-managed-default-samclisourcebucket-1hoa4cv2sc075

  deploy_backend_production_lagacy:
    <<: *deploy_backend_production_steps
  
  run_webapp_test:
    <<: *webapp_test_steps

  webapp_push_to_s3_staging:
    <<: *webapp_push_to_s3_steps
    environment:
      - S3_BUCKET_NAME: chameleon-game-webapp-test
      - ENV_FILE_POSTFIX: staging

  webapp_push_to_s3_production:
    <<: *webapp_push_to_s3_steps
    environment:
      - S3_BUCKET_NAME: chameleon-game-webapp
      - ENV_FILE_POSTFIX: production
  
version: 2.1
orbs:
  aws-serverless: circleci/aws-serverless@1.0.2

workflows:
  test_and_deploy:
    jobs:
      - run_backend_tests
      - run_webapp_test
      - deploy_backend_staging:
          requires:
            - run_backend_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - staging
      - deploy_backend_production:
          requires:
            - run_backend_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - master
      - deploy_backend_production_lagacy:
          requires:
            - run_backend_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - master
      - webapp_push_to_s3_staging:
          requires:
            - run_backend_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - staging
      - webapp_push_to_s3_production:
          requires:
            - run_backend_tests
            - run_webapp_test
          filters:
            branches:
              only:
                - master
